//
// Generated file, do not edit! Created by nedtool 4.6 from src/Base/Messages/icancloud_App_CPU_Message.msg.
//

#ifndef _ICANCLOUD_APP_CPU_MESSAGE_M_H_
#define _ICANCLOUD_APP_CPU_MESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "icancloud_Message.h"
			
// }}

/**
 * Class generated from <tt>src/Base/Messages/icancloud_App_CPU_Message.msg:15</tt> by nedtool.
 * <pre>
 * ///
 * /// icancloud Message for CPU requests
 * ///
 * message icancloud_App_CPU_Message extends icancloud_Message
 * {
 *     @customize(true);
 * 
 *     simtime_t cpuTime = 0.0;				// CPU execution time
 *     unsigned long totalMIs = 0;			// Number of instructions to be executed.
 *     unsigned long remainingMIs = 0;		// Remaining instructions to be executed.
 *     int quantum = 0;					// Quantum used in Round-Robin algorithm (measured in ticks)
 *     int cpuPriority = 0;					// Priority 
 * }
 * </pre>
 *
 * icancloud_App_CPU_Message_Base is only useful if it gets subclassed, and icancloud_App_CPU_Message is derived from it.
 * The minimum code to be written for icancloud_App_CPU_Message is the following:
 *
 * <pre>
 * class icancloud_App_CPU_Message : public icancloud_App_CPU_Message_Base
 * {
 *   private:
 *     void copy(const icancloud_App_CPU_Message& other) { ... }

 *   public:
 *     icancloud_App_CPU_Message(const char *name=NULL, int kind=0) : icancloud_App_CPU_Message_Base(name,kind) {}
 *     icancloud_App_CPU_Message(const icancloud_App_CPU_Message& other) : icancloud_App_CPU_Message_Base(other) {copy(other);}
 *     icancloud_App_CPU_Message& operator=(const icancloud_App_CPU_Message& other) {if (this==&other) return *this; icancloud_App_CPU_Message_Base::operator=(other); copy(other); return *this;}
 *     virtual icancloud_App_CPU_Message *dup() const {return new icancloud_App_CPU_Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from icancloud_App_CPU_Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(icancloud_App_CPU_Message);
 * </pre>
 */
class icancloud_App_CPU_Message_Base : public ::icancloud_Message
{
  protected:
    simtime_t cpuTime_var;
    unsigned long totalMIs_var;
    unsigned long remainingMIs_var;
    int quantum_var;
    int cpuPriority_var;

  private:
    void copy(const icancloud_App_CPU_Message_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const icancloud_App_CPU_Message_Base&);
    // make constructors protected to avoid instantiation
    icancloud_App_CPU_Message_Base(const char *name=NULL, int kind=0);
    icancloud_App_CPU_Message_Base(const icancloud_App_CPU_Message_Base& other);
    // make assignment operator protected to force the user override it
    icancloud_App_CPU_Message_Base& operator=(const icancloud_App_CPU_Message_Base& other);

  public:
    virtual ~icancloud_App_CPU_Message_Base();
    virtual icancloud_App_CPU_Message_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class icancloud_App_CPU_Message");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getCpuTime() const;
    virtual void setCpuTime(simtime_t cpuTime);
    virtual unsigned long getTotalMIs() const;
    virtual void setTotalMIs(unsigned long totalMIs);
    virtual unsigned long getRemainingMIs() const;
    virtual void setRemainingMIs(unsigned long remainingMIs);
    virtual int getQuantum() const;
    virtual void setQuantum(int quantum);
    virtual int getCpuPriority() const;
    virtual void setCpuPriority(int cpuPriority);
};


#endif // ifndef _ICANCLOUD_APP_CPU_MESSAGE_M_H_

